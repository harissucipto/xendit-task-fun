// Code generated by sqlc. DO NOT EDIT.
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  content,
  org_name
) VALUES (
  $1, $2
) RETURNING id, content, org_name, created_at
`

type CreateCommentParams struct {
	Content string `json:"content"`
	OrgName string `json:"org_name"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Content, arg.OrgName)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.OrgName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE org_name = $1
`

func (q *Queries) DeleteComment(ctx context.Context, orgName string) error {
	_, err := q.db.ExecContext(ctx, deleteComment, orgName)
	return err
}

const listComments = `-- name: ListComments :many
SELECT id, content, org_name, created_at FROM comments
WHERE org_name = $1
ORDER BY created_at ASC
`

func (q *Queries) ListComments(ctx context.Context, orgName string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listComments, orgName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.OrgName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
